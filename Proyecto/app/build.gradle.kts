/*
 * This file was generated by the Gradle 'init' task.
 *
 * This project uses @Incubating APIs which are subject to change.
 */

plugins {
    application
    id("buildlogic.java-application-conventions")
    id("org.openjfx.javafxplugin") version "0.1.0"
    id("org.beryx.jlink") version "3.1.1"
}

repositories {
    mavenCentral()
}

javafx {
    version = "21"
    modules("javafx.base", "javafx.controls", "javafx.fxml")
}

dependencies {
    implementation(project(":common"))
    implementation("org.apache.commons:commons-text")
    implementation("org.postgresql:postgresql:42.7.7")
    implementation("org.openjfx:javafx-controls:21")
    implementation("org.openjfx:javafx-fxml:21")
    implementation("org.openjfx:javafx-base:21")
    implementation("org.openjfx:javafx-graphics:21")
    testImplementation("junit:junit:4.13.2")
}

application {
    // Define the main class for the application.
    mainClass = "koolfileindexer.App"
    mainModule = "koolfileindexer"
    applicationDefaultJvmArgs =
        listOf(
            "--add-modules=javafx.controls,javafx.fxml",
            "--add-opens=java.base/java.lang=ALL-UNNAMED",
            "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
            "--add-opens=java.base/java.util=ALL-UNNAMED",
            "--add-opens=java.desktop/sun.awt=ALL-UNNAMED",
            "--add-opens=javafx.controls/com.sun.javafx.scene.control.skin=ALL-UNNAMED",
            "--add-opens=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED",
            "--add-opens=javafx.base/com.sun.javafx.runtime=ALL-UNNAMED",
            "--add-opens=javafx.graphics/com.sun.javafx.util=ALL-UNNAMED",
            "--add-opens=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED",
            "--add-opens=javafx.graphics/com.sun.javafx.scene.traversal=ALL-UNNAMED"
        )
}

jlink {
    var currentOs = org.gradle.internal.os.OperatingSystem.current()
    imageDir.set(file("${rootProject.projectDir}/dist/${currentOs.name}"))
    imageZip.set(file("${rootProject.projectDir}/dist/${currentOs.name}/koolfileindexer.zip"))

    options = listOf(
        "--strip-debug",
        "--compress=2",
        "--no-header-files",
        "--no-man-pages"
    )

    launcher {
        name = "KoolFileIndexer"
        jvmArgs = listOf(
            "-Dfile.encoding=UTF-8",
            "--add-modules=javafx.controls,javafx.fxml",
            "--add-opens=java.base/java.lang=ALL-UNNAMED",
            "--add-opens=java.base/java.lang.reflect=ALL-UNNAMED",
            "--add-opens=java.base/java.util=ALL-UNNAMED",
            "--add-opens=java.desktop/sun.awt=ALL-UNNAMED",
            "--add-opens=javafx.controls/com.sun.javafx.scene.control.skin=ALL-UNNAMED",
            "--add-opens=javafx.controls/com.sun.javafx.scene.control=ALL-UNNAMED",
            "--add-opens=javafx.base/com.sun.javafx.runtime=ALL-UNNAMED",
            "--add-opens=javafx.graphics/com.sun.javafx.util=ALL-UNNAMED",
            "--add-opens=javafx.graphics/com.sun.javafx.scene=ALL-UNNAMED",
            "--add-opens=javafx.graphics/com.sun.javafx.scene.traversal=ALL-UNNAMED"
        )
    }

    jpackage {
        outputDir = file("${rootProject.projectDir}/dist/${currentOs.name}").absolutePath

        when {
            currentOs.isWindows -> {
                // Windows-specific configuration
                installerType = "exe"
                imageOptions = listOf(
                    "--win-dir-chooser",
                    "--win-shortcut",
                    "--win-menu"
                )
                installerOptions = listOf(
                    "--win-dir-chooser",
                    "--win-per-user-install",
                    "--win-shortcut",
                    "--win-menu"
                )
            }
            currentOs.isMacOsX -> {
                // macOS-specific configuration
                installerType = "dmg"
                imageOptions = listOf()
                installerOptions = listOf(
                    "--mac-package-name", "KoolFileIndexer",
                    "--mac-package-version", "1.0",
                    "--mac-package-identifier", "koolfileindexer.app"
                )
            }
            currentOs.isLinux -> {
                // Linux-specific configuration
                installerType = "deb"
                imageOptions = listOf()
                installerOptions = listOf(
                    "--linux-package-name", "koolfileindexer",
                    "--linux-package-version", "1.0",
                    "--linux-package-architecture", "amd64",
                    "--linux-package-description", "Kool File Indexer",
                    "--linux-package-url", "https://github.com/Mauro-Suesca/KoolFileIndexer",
                    "--linux-package-maintainer", "ThePixelCode <thepixelcode@proton.me>",
                    "--linux-package-depends", "java-runtime",
                    "--linux-shortcut",
                    "--linux-menu-group", "Utilities"
                )
            }
            else -> {
                // Unsupported OS
                throw UnsupportedOperationException("Unsupported OS")
            }
        }

        appVersion = "1.0"
        vendor = "ThePixelCode"
        description = "Kool File Indexer"
    }
}

tasks.register("buildAllPlatforms") {
    // TODO
}
